burnin = 1
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, iterations = iterations, burnin = burnin, thin = thin)
model
model$Mean_Post_Phi_d
model$Mean_Post_Beta_kd
model$Mean_Post_Beta_k
plot(model$Mean_Post_Beta_k[1,],model$Mean_Post_Beta_k[2,])
lines(0:1,0:1)
model$Chain_Sigma
dim(model$Chain_Sigma)
model$Chain_Sigma
model$Chain_Sigma[[1]]
dim(model$Chain_Sigma[[1]])
matplot(model$Chain_Sigma[[1]][,,1])
matplot(model$Chain_Sigma[[1]][,,1],type="l")
matplot(model$Chain_Sigma[[1]][,,2],type="l")
matplot(model$Chain_Sigma[[1]][,,3],type="l")
matplot(model$Chain_Sigma[[1]][,,4],type="l")
matplot(model$Chain_Sigma[[1]][,,40],type="l")
model$Chain_Sigma[[1]][1,,]
det(model$Chain_Sigma[[1]][1,,])
det(model$Chain_Sigma[[1]][2,,])
det(model$Chain_Sigma[[1]][3,,])
det(model$Chain_Sigma[[1]][4,,])
det(model$Chain_Sigma[[1]][5,,])
det(model$Chain_Sigma[[2]][5,,])
det(model$Chain_Sigma[[2]][4,,])
det(model$Chain_Sigma[[2]][3,,])
det(model$Chain_Sigma[[2]][2,,])
det(model$Chain_Sigma[[2]][1,,])
matplot(model$Chain_Sigma[[1]][,,45],type="l")
matplot(model$Chain_Sigma[[1]][,,44],type="l")
matplot(model$Chain_Sigma[[1]][,,43],type="l")
matplot(model$Chain_Sigma[[1]][,,42],type="l")
matplot(model$Chain_Sigma[[1]][,,41],type="l")
matplot(model$Chain_Sigma[[1]][,,40],type="l")
matplot(model$Chain_Sigma[[1]][,,39],type="l")
matplot(model$Chain_Sigma[[1]][,,38],type="l")
matplot(model$Chain_Sigma[[1]][,,37],type="l")
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 5
burnin = 1
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, iterations = iterations, burnin = burnin, thin = thin, r = 10^4, q = 10^4)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 50
burnin = 1
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, iterations = iterations, burnin = burnin, thin = thin, r = 10^4, q = 10^4)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 50
burnin = 1
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, iterations = iterations, burnin = burnin, thin = thin, r = 10^4, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 50
burnin = 1
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 3, iterations = iterations, burnin = burnin, thin = thin, r = 10^4, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
library(Rcpp)
library(RcppArmadillo)
library(statmod)
library(matrixStats)
library(rmutil)
library(zoo)
library(MCMCpack)
library(pgdraw)
library(RcppDist)
set.seed(2)
#Define Parameters
D = 20
N = 10000
alpha = 1
addlog = function(a,b){
if ((a-b>50)==TRUE){
return(a)
} else if ((b-a>50)==TRUE){
return(b)
}
else {
return(a+log(1+exp(b-a)))
}
}
sublog = function(a,b){#a-b where a=log(x), b=log(y)
if ((a-b>50)==TRUE){
return(a)
} else if ((b-a>50)==TRUE){
return(-b)
}
else {
return(a+log(1-exp(b-a)))
}
}
#load the edge matrix
# load("tree_mat.rda")
# toy_tree = tree.edge #have to rename because laziness
#let's hard code the tree into an edge matrix
toy_tree = matrix(0,nrow=10,ncol=2)
toy_tree[1,] = c(7,8)
toy_tree[2,] = c(7,9)
toy_tree[3,] = c(9,10)
toy_tree[4,] = c(9,11)
toy_tree[5,] = c(8,1)
toy_tree[6,] = c(8,2)
toy_tree[7,] = c(10,3)
toy_tree[8,] = c(10,4)
toy_tree[9,] = c(11,5)
toy_tree[10,] = c(11,6)
tree.edge = toy_tree
root = setdiff(toy_tree[,1],toy_tree[,2])
internal_nodes = unique(toy_tree[,1])
internal_nodes = sort(internal_nodes)
internal_nodes_C = internal_nodes - 1
A = max(internal_nodes)
leaves = setdiff(toy_tree[,2],toy_tree[,1])
V = length(leaves)
#come up with a mapping to
p = length(internal_nodes)
node_map = rep(0,A)
for(x in 1:p){
node_map[internal_nodes[x]] = x
}
###################
#                 #
###################
# Data Generation #
###################
#                 #
###################
Phi = 0.1*diag(p)
Lambda = 5*diag(p)
#generate true Sigma_k
Sigma = matrix(0,nrow=p,ncol=p)
Sigma = riwish((p+2),Phi)
#generate true mu_k
mu = chol(Lambda) %*% matrix(rnorm(p,0,1),nrow=p)
#genreate true psi_dk
psi_pd = matrix(0,nrow=p,ncol=D)
for(d in 1:D){
psi_pd[,d] = chol(Sigma) %*% matrix(rnorm(p,0,1),nrow=p) + mu
}
f_pg = function(b,c){
return(pgdraw(b,c))
}
f_iwish = function(df, S){
return(riwish(df,S))
}
f_invgauss = function(m,s){
return(statmod::rinvgauss(1,mean = m, shape = s))
}
######
# set up things
W = solve(Sigma)
r = 200
s = 100
lambda = rgamma(1,shape = r, scale = 1/s)
# lambda = rgamma(1,shape = r+p*(p+1)/2,scale = 1/(s+(1/2)*sum(abs(W))))
#find S
psi_mat = matrix(0,nrow=p,ncol=D)
mu_mat = matrix(0,nrow=p,ncol=D)
for(d in 1:D){
psi_mat[,d] = psi_pd[,d]
mu_mat[,d] = mu
}
X = t(psi_mat-mu_mat)
S = t(X) %*% X
#draw tau's
Tau = matrix(0,nrow=p,ncol=p)
for(i in 2:p){
for(j in 1:(i-1)){
u = statmod::rinvgauss(1,mean = sqrt(lambda^2/W[i,j]^2), shape = lambda^2)
Tau[i,j] = 1/u
Tau[j,i] = 1/u
}
}
library(BayesianGLasso)
pack = blockGLasso(X, lambdaPriora = 1, lambdaPriorb = 1/10)
#increaing lambda_a = higher covariacne
#decreasing lambda_a = marginally lower covariance
#increasing lambda_b = higher covariance
#decreasing lambda_b = not much change
plot(pack$lambdas,type="l")
chain_sigma_i_pp = pack$Sigmas
post_Sigma = matrix(0,nrow=p,ncol=p)
for(i in 1001:3000){
post_Sigma = post_Sigma + chain_sigma_i_pp[[i]]
}
post_Sigma = post_Sigma/(3000-1001)
plot(Sigma,post_Sigma)
lines(-1:1,-1:1)
# chain_w_i_pp = pack$Omegas
# post_Omega = matrix(0,nrow=p,ncol=p)
# for(i in 1001:3000){
#   post_Omega = post_Omega + chain_w_i_pp[[i]]
# }
# post_Omega = post_Omega/(3000-1001)
# plot((Sigma),solve(post_Omega))
# lines(-1:1,-1:1)
# #test in R
# a = 1
# C = solve((S[a,a] + lambda)*solve(W[-a,-a]) + diag(1/Tau[-a,a]))
# chol(C) %*% rnorm(p-1,0,1) - C %*% S[-a,a]
# sigma11 = Sigma[-p,-p]
# sigma12 = matrix(Sigma[p,-p],nrow=p-1,ncol=1)
# sigma21 = matrix(Sigma[-p,p],nrow=1,ncol=p-1)
#
# sigma11 - sigma12 %*% sigma21/Sigma[p,p]
# ####
# # C Code
# sourceCpp("Bayesian_Graphical_Lasso.cpp")
#
# warmup = 5000
# iterations = 10000
#
# chain_w_ppi = array(0,dim=c(p,p,iterations))
# chain_lambda = rep(0,iterations)
# results = NULL
# results[[2]] = chain_w_ppi
# results[[1]] = chain_lambda
#
# # lambda = mean(pack$lambdas)
#
# # for(i in 1:p){
# #   for(j in 1:p){
# #     W[i,j] = post_Omega[i,j]
# #   }
# # }
#
# # #draw tau's
# # Tau = matrix(0,nrow=p,ncol=p)
# # for(i in 2:p){
# #   for(j in 1:(i-1)){
# #     u = statmod::rinvgauss(1,mean = sqrt(lambda^2/W[i,j]^2), shape = lambda^2)
# #     u = sqrt(lambda^2/W[i,j]^2)
# #     Tau[i,j] = 1/u
# #     Tau[j,i] = 1/u
# #   }
# # }
#
# out = bglasso(results, chain_w_ppi, chain_lambda, f_invgauss, W, S, Tau, lambda, D, p, r, s, iterations)
#
# chain_w_ppi = out[[2]]
# chain_lambda = out[[1]]
#
# plot(chain_lambda,type = "l")
#
# post_W = matrix(0,nrow=p,ncol=p)
# for(i in (warmup+1):iterations){
#   post_W = post_W + chain_w_ppi[,,i]
# }
# post_W = post_W/(iterations-warmup)
#
# plot(Sigma,solve(post_W))
# lines(-1:1,-1:1)
#
# # matplot(t(chain_w_ppi[1,,warmup:iterations]),type="l")
pack$Sigmas[[1]]
pack$Omegas[[1]]
solve(pack$Omegas[[1]])
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 50
burnin = 1
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 3, iterations = iterations, burnin = burnin, thin = thin, r = 10^4, q = 10^2)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
Rcpp::compileAttributes()
devtools::document()
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 50
burnin = 1
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 3, iterations = iterations, burnin = burnin, thin = thin, r = 10^4, q = 10^2)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 50
burnin = 1
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 3, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
Rcpp::compileAttributes()
devtools::document()
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 5
burnin = 0
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 3, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 6
burnin = 0
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 3, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 6
burnin = 0
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 7
burnin = 0
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 8
burnin = 0
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 9
burnin = 0
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 10
burnin = 0
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
# model = LTNLDA_block_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
model = LTNLDA_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
######################
# Gibbs Sampler Test #
######################
library(LTNLDA)
set.seed(1)
#load dataset
data("ps",package = "LTNLDA")
#Run Analsyis
K = 2
iterations = 9
burnin = 0
thin = 1
model = LTNLDA_block_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin, r = 1, q = 10)
# model = LTNLDA_cov(ps = ps, K = K, C = 5, iterations = iterations, burnin = burnin, thin = thin)
matplot(model$Chain_Sigma[[1]][,,37],type="l")
sum = Summary(model)
sum
library(Rcpp)
library(devtools)
Rcpp::compileAttributes()
devtools::document()
devtools::install(build_vignettes = TRUE)
library(devtools)
library(Rcpp)
library(RcppArmadillo)
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::install(build_vignettes = TRUE)
library(Rcpp)
library(devtools)
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::install(build_vignettes = )
devtools::install(build_vignettes = TRUE)
library(BDgraph)
help(BDgraph)
help(bdgraph)
Rcpp::compileAttributes()
devtools::document()
devtools::install(build_vignettes = TRUE)
Rcpp::compileAttributes()
devtools::document()
devtools::install(build_vignettes = TRUE)
